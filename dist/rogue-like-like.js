// Generated by CoffeeScript 1.7.1
var rogueLikeLike;

rogueLikeLike = angular.module('rogueLikeLike', []);

rogueLikeLike.value('boardConfig', {
  xLimit: 512,
  yLimit: 512,
  spacing: 8
});

// Generated by CoffeeScript 1.7.1
(function(ng, app) {
  'use strict';
  return app.factory('GridMaker', function(boardConfig) {
    var GridMaker;
    GridMaker = (function() {
      function GridMaker(context) {
        this.context = context;
        this.xLimit = boardConfig.xLimit;
        this.yLimit = boardConfig.yLimit;
        this.spacing = boardConfig.spacing;
        this.gridlines = this.calculateGrid();
        this.drawGrid();
      }

      GridMaker.prototype.drawGrid = function() {
        var item, _i, _j, _len, _len1, _ref, _ref1, _results;
        _ref = this.gridlines.vertical;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          this.verticalLine(item);
        }
        _ref1 = this.gridlines.horizontal;
        _results = [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          item = _ref1[_j];
          _results.push(this.horizontalLine(item));
        }
        return _results;
      };

      GridMaker.prototype.calculateGrid = function() {
        var _i, _j, _ref, _ref1, _results, _results1;
        return {
          vertical: (function() {
            _results = [];
            for (var _i = 0, _ref = this.xLimit; 0 <= _ref ? _i <= _ref : _i >= _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }
            return _results;
          }).apply(this).filter((function(_this) {
            return function(x) {
              return x % _this.spacing === 0;
            };
          })(this)),
          horizontal: (function() {
            _results1 = [];
            for (var _j = 0, _ref1 = this.yLimit; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; 0 <= _ref1 ? _j++ : _j--){ _results1.push(_j); }
            return _results1;
          }).apply(this).filter((function(_this) {
            return function(y) {
              return y % _this.spacing === 0;
            };
          })(this))
        };
      };

      GridMaker.prototype.drawLine = function(x1, y1, x2, y2) {
        this.context.beginPath();
        this.context.moveTo(x1, y1);
        this.context.lineTo(x2, y2);
        return this.context.stroke();
      };

      GridMaker.prototype.horizontalLine = function(coord) {
        return this.drawLine(0, coord, this.xLimit, coord);
      };

      GridMaker.prototype.verticalLine = function(coord) {
        return this.drawLine(coord, 0, coord, this.yLimit);
      };

      return GridMaker;

    })();
    return GridMaker;
  });
})(angular, rogueLikeLike);

// Generated by CoffeeScript 1.7.1
(function(ng, app) {
  'use strict';
  return app.factory('MessageFactory', function($log) {
    var MessageFactory;
    MessageFactory = (function() {
      MessageFactory.prototype.add = function(msg) {
        this.scope.$apply((function(_this) {
          return function() {
            _this.messages.push(msg);
          };
        })(this));
      };

      MessageFactory.prototype.setupWebsocketMethods = function() {
        this.ws.onopen = (function(_this) {
          return function() {
            $log.info('onopen called', 'CONNECT');
            _this.add('CONNECT');
          };
        })(this);
        this.ws.onclose = (function(_this) {
          return function() {
            $log.info('onclose called', 'DISCONNECT');
            _this.add('DISCONNECT');
          };
        })(this);
        this.ws.onmessage = (function(_this) {
          return function(event) {
            $log.info('onmessage called', 'MESSAGE: ' + event.data);
            _this.add('MESSAGE: ' + event.data);
          };
        })(this);
        this.ws.onerror = function(err) {
          $log.info('WEBSOCKET ERROR', err);
        };
      };

      function MessageFactory(scope) {
        this.scope = scope;
        this.messages = [];
        this.ws = new WebSocket('ws://localhost:8080/');
        this.setupWebsocketMethods();
        $log.info('MessageFactory constructed');
        return;
      }

      return MessageFactory;

    })();
    return MessageFactory;
  });
})(angular, rogueLikeLike);

// Generated by CoffeeScript 1.7.1
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

(function(ng, app) {
  'use strict';
  return app.factory("MouseTracker", function() {
    var MouseTracker;
    MouseTracker = (function() {
      function MouseTracker(canvas, context) {
        this.canvas = canvas;
        this.context = context;
        this.writeMessage = __bind(this.writeMessage, this);
        this.getMousePos = __bind(this.getMousePos, this);
        this.trackMovement = __bind(this.trackMovement, this);
        this.canvas.addEventListener("mousemove", this.trackMovement, false);
      }

      MouseTracker.prototype.trackMovement = function(evt) {
        var message;
        this.mousePos = this.getMousePos(evt);
        message = "Mouse position: " + this.mousePos.x + ", " + this.mousePos.y;
        this.writeMessage(message);
      };

      MouseTracker.prototype.getMousePos = function(evt) {
        var rect;
        rect = this.canvas.getBoundingClientRect();
        return {
          x: Math.floor(evt.clientX - rect.left),
          y: Math.floor(evt.clientY - rect.top)
        };
      };

      MouseTracker.prototype.writeMessage = function(message) {
        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
        this.context.font = "10pt Calibri";
        this.context.fillStyle = "black";
        this.context.fillText(message, 5, 12);
      };

      return MouseTracker;

    })();
    return MouseTracker;
  });
})(angular, rogueLikeLike);

// Generated by CoffeeScript 1.7.1
(function(ng, app) {
  'use strict';
  return app.controller('MainController', function($scope, boardConfig) {
    $scope.board = boardConfig;
  });
})(angular, rogueLikeLike);

// Generated by CoffeeScript 1.7.1
(function(ng, app) {
  'use strict';
  return app.controller('MessagesController', function($scope, $log, MessageFactory) {
    $scope.view = new MessageFactory($scope);
  });
})(angular, rogueLikeLike);

// Generated by CoffeeScript 1.7.1
(function(ng, app) {
  'use strict';
  return app.directive('gameBoard', function(boardConfig, GridMaker, MouseTracker) {
    return {
      restrict: 'A',
      controller: function($scope) {},
      link: function(scope, element) {
        var canvas, context, grid, mouse;
        canvas = element[0];
        context = canvas.getContext('2d');
        mouse = new MouseTracker(canvas, context);
        grid = new GridMaker(context);
        grid.drawLine(0, 0, 25, 25);
      }
    };
  });
})(angular, rogueLikeLike);


/*
app.factory 'GridData', ()->
  gridDataObject = {}
  gridDataServices = {}

  gridDataServices.add = ()->
  GridData
 */
