// Generated by CoffeeScript 1.7.1
(function(ng, app) {
  'use strict';
  return app.factory('GridMaker', function(boardConfig) {
    var GridMaker;
    GridMaker = (function() {
      function GridMaker(context) {
        this.context = context;
        this.xLimit = boardConfig.xLimit;
        this.yLimit = boardConfig.yLimit;
        this.spacing = boardConfig.spacing;
        this.gridlines = this.calculateGrid();
        this.drawGrid();
      }

      GridMaker.prototype.drawGrid = function() {
        var item, _i, _j, _len, _len1, _ref, _ref1, _results;
        _ref = this.gridlines.vertical;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          this.verticalLine(item);
        }
        _ref1 = this.gridlines.horizontal;
        _results = [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          item = _ref1[_j];
          _results.push(this.horizontalLine(item));
        }
        return _results;
      };

      GridMaker.prototype.calculateGrid = function() {
        var _i, _j, _ref, _ref1, _results, _results1;
        return {
          vertical: (function() {
            _results = [];
            for (var _i = 0, _ref = this.xLimit; 0 <= _ref ? _i <= _ref : _i >= _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }
            return _results;
          }).apply(this).filter((function(_this) {
            return function(x) {
              return x % _this.spacing === 0;
            };
          })(this)),
          horizontal: (function() {
            _results1 = [];
            for (var _j = 0, _ref1 = this.yLimit; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; 0 <= _ref1 ? _j++ : _j--){ _results1.push(_j); }
            return _results1;
          }).apply(this).filter((function(_this) {
            return function(y) {
              return y % _this.spacing === 0;
            };
          })(this))
        };
      };

      GridMaker.prototype.drawLine = function(x1, y1, x2, y2) {
        this.context.beginPath();
        this.context.moveTo(x1, y1);
        this.context.lineTo(x2, y2);
        return this.context.stroke();
      };

      GridMaker.prototype.horizontalLine = function(coord) {
        return this.drawLine(0, coord, this.xLimit, coord);
      };

      GridMaker.prototype.verticalLine = function(coord) {
        return this.drawLine(coord, 0, coord, this.yLimit);
      };

      return GridMaker;

    })();
    return GridMaker;
  });
})(angular, rogueLikeLike);
